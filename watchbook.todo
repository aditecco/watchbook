
WatchBook.todo
==============

Inbox:
  https://firebase.googleblog.com/2014/04/best-practices-arrays-in-firebase.html
  - move INIT_USER to auth?

Fixes:
  Things that don't work properly
  *******************************
  - …
  - when network is slow, local content is created with a delay
  - show some kind of user feedback for the error response
  - handle not found in item search
  - empty select option in Firefox shows '1924' even though the value is ''
  - fix app root URL
  - 'Can't perform a React state update on an unmounted component'
    handleAuth	@	Auth.jsx:88
  - "A non-serializable value was detected in the state"

Optims/refactor:
  Things that work, but can be improved
  *************************************
  - …
  - image lazyloading
  - refactor routes w/o PrivateRoute
  - fine-tune sagas (esp. additional info)
  - recreate/redesign filter & sort
  - better autosuggest loading state
  - handle long titles in notifs
  - create className utility
  - API key should be editable
  - infinite scroll loading indicator visible in filter view
  - refine item search skeleton loader
  - remove ranges from years filter @quick
  - enforce fixed order in item data sheet @quick 
  - rewrite reducer logic w/ immer-like syntax @focus
  - move async logic to saga @focus
      √ content search
      √ additional info
      auth (signup, login, logout)
      fetchDBdata
      √ create content
    - auth
    - fetchDBdata
  - fine-tune styles
    - signup/login switcher @quick 
    background: radial-gradient(at bottom center, transparent 60%, rgba(0, 0, 0, 0.9));
  - (re)organize SCSS vars, map all colors, sizes
  - redesign card w/ background-image
  - actually implement Typescript
  - refactor to extract components where due
    - …
  - rename WatchedList as content-agnostic @quick 
  - Complete DataProvider
    - …
    - move user init to ~~other specialized component~~ saga
    - init settings in new users
    - make it modular (dataset…)
  - CSS
    - reset all button outlines

Features/stories:
  Things that could be implemented
  ********************************
  - …
  - create new product GIFs @focus 
  - re-fetch card info
    add info to cards that don't have it,
    or update card info
    re-fetch button
    fetch content info via API
    merges new info w/ old info
    uploads merged info to DB
    updates local copy of content item
    - update local copy of content item
  - create advanced search by IMDB ID
  - manually add a title
  - create repo readme
  - create website @focus 
  - create stats page
  - create persistent notifs
  - add _notes_ feature
  - add more filters (director, …)
    - director @quick
  - move internal info (response, ID, etc) to hidden section @quick
  - create poster downloader to cache media
  - [TO-WATCH] to watch cards should have the ability to be converted to watched
  - card deletion
  - implement search with Algolia
  - create mobile app icon & landing page @focus 
  - create public demo version (no private pages) @focus 
    w/ static dataset http://files.tmdb.org
  - create dark theme @focus 
  - add fullscreen mode to cards
  - add reload button to watched & toWatch (re-fetches loads cards if 
  - Implement PWA @focus
    https://create-react-app.dev/docs/making-a-progressive-web-app/
    requires HTTPS!
  - [CARDS] create card back
    loads rich info about the content
    displays a skeleton animation while loading
    https://github.com/danilowoz/react-content-loader
    https://github.com/buildo/react-placeholder
    https://github.com/dvtng/react-loading-skeleton
    - add skeleton loader for card backs or card loading placeholder @focus
    
  lost)
  - add page transitions on page change @focus 
    https://github.com/react-spring/react-spring-examples/blob/renderprops/demos/renderprops/pagetransitions/index.js
  - save API key to DB
  - create validators for input fields
  - add user name to login notif
  - add user config options to profile page
  - Add signout notif
  - allow multiple data sources (APIs)
  - sync local data to DB when performing CRUD operations
    - update
    - delete

UX:
  Things that can make the user experience better
  ***********************************************
  - create placeholder image for movie cards
  - create graphical loader for infinite scroll
  - auto-shorten directors' names, i.e. S. Kubrik
  ✔ make filter UI sticky @done(20-05-14 01:04)

Platform:
  Env, tools, etc
  ***************
  - …

Tests:
  - …
  - try Jest
  - try visual testing w/ StoryBook
  - write e2e tests

Feature ideas:
  Things that could be implemented and require major analysis
  ***********************************************************
  - Gamification
  - content collections

Archive:
  ✔ fix the horrible 'ghost items' issue @done(20-05-13 01:13) @project(Fixes)
    [ { key: '-M3cCtkN-vlW054wz2nA' }, { key: '-M3cCpPyjTF5p8zLwZyi' } ]
    I'm an idiot
  ✔ create POC @done(20-05-09 02:50) @project(Features/stories)
  ✔ remove 'key' from cards (filter property) @done(20-05-10 03:13) @project(Features/stories)
  ✔ [WATCHED] add reset button to filter fields @done(20-05-08 00:53) @project(Features/stories)
  ✔ add technical info to settings page/create about page @quick @done(20-05-08 01:14) @project(Features/stories)
  ✔ data of prev query are in state when performing new query @high @done(20-05-08 00:47) @project(Fixes)
  ✔ additional info @done(20-05-08 00:48) @project(Optims/refactor)
  ✔ make cards bigger on screens > 360px w @done(20-05-07 01:55) @project(Optims/refactor)
  ✔ merge handleAddToWatch & handleAddWatched @quick @done(20-05-04 01:16) @project(Optims/refactor)
  ✔ create content @done(20-05-04 01:16) @project(Optims/refactor)
  ✔ fix item search perf issues @high @done(20-05-02 16:03) @project(Fixes)
    Appears to work fine on mobile
  ✔ content search @done(20-05-02 15:15) @project(Optims/refactor)
  ✔ throttle or debounce `fetchQueryData` @done(20-05-02 14:49) @project(Optims/refactor)
  ✔ Implement 'show more' for autosuggest @done(20-05-01 23:10) @project(Features/stories)
  ✔ remove 'movie not found' errors from the UI -- handle API errors properly @done(20-05-01 16:50) @project(Optims/refactor)
  ✔ show auth errors in the UI @done(20-05-01 01:54) @project(Fixes)
  ✔ duplicate detection @done(20-04-30 00:28) @project(Features/stories)
  ✔ empty sort & filter fields @focus @done(20-04-29 01:23) @project(Fixes)
  ✔ refine CardFlipControls front @done(20-04-29 00:51) @project(Optims/refactor)
  ✔ create 1st draft @done(20-04-27 00:38) @project(Features/stories)
  ✔ increase tap targets for info button @quick @done(20-04-27 01:32) @project(UX)
  ✔ Auth wrapper @done(20-04-26 17:02) @project(Fixes)
  ✔ add version/build number in footer or settings @quick @done(20-04-26 17:02) @project(Features/stories)
  ✔ de-duplicate years in year filter @quick @done(20-04-26 15:19) @project(Fixes)
  ✔ show number of results in search @quick @done(20-04-26 03:31) @project(UX)
  ✔ add ESC key listener to search cancel button @quick @done(20-04-26 03:17) @project(Features/stories)
  ✔ Create navbar comp @done(20-04-26 02:29) @project(Optims/refactor)
  ✔ keep profile & settings buttons visible in profile & settings pages @done(20-04-26 02:29) @project(Optims/refactor)
  ✔ profile inputs @done(20-04-26 02:07) @project(Optims/refactor)
  ✔ add fixed width wrapper to nav & header & app-wide @done(20-04-25 18:27) @project(Fixes)
  ✔ filter/order info on card back (response, ID, timestamp) @done(20-04-17 00:14) @project(Features/stories)
  ✔ create card back structure @done(20-04-16 01:07) @project(Features/stories)
  ✔ create card back styles @done(20-04-16 01:07) @project(Features/stories)
  ✔ use axios for requests @done(20-04-15 23:40) @project(Optims/refactor)
  ✔ Implement lazyloading for cards @focus @done(20-04-15 23:40) @project(Features/stories)
  ✔ add scrollTo top to every content page @done(20-04-13 18:57) @project(Optims/refactor)
  ✔ optimize Watched page performance @done(20-04-13 18:38) @project(Fixes)
    add lazy loading for card posters
  ✔ create DB rules @focus @done(20-04-13 01:30) @project(Platform)
  ✔ React does not recognize the `data-toggleTarget` prop on a DOM element. @done(20-04-13 01:29) @project(Fixes)
  ✔ DataProvider loader can get stuck @done(20-04-13 01:29) @project(Fixes)
  ✔ use redux @done(20-04-13 01:29) @project(Optims/refactor)
  ✔ refactor to fetch remote data only when needed @done(20-04-13 01:30) @project(Optims/refactor)
  ✔ fix card modal position @done(20-04-05 17:06) @project(Fixes)
    calculate centering with: left: (temp1.getBoundingClientRect().width - window.visualViewport.width) / 2
  ✔ add most recent toWatch content to HP @done(20-04-05 03:04) @project(Features/stories)
  ✔ card in modal should take (almost) full viewport @done(20-04-05 02:32) @project(UX)
  ✔ try auto-deploy w/ Netlify @done(20-04-05 02:32) @project(Platform)
  ✔ handle automatic deploy @done(20-04-05 02:32) @project(Platform)
  ✔ handle deploy config @done(20-04-05 02:32) @project(Platform)
  ✔ show loader when user is authenticating @done(20-04-05 02:31) @project(Features/stories)
  ✔ Add/Create a spinner for loading states @done(20-04-05 02:32) @project(UX)
  ✔ remove signup test data @done(20-04-05 02:30) @project(Optims/refactor)
    firebase won't accept empty values
  ✔ expose interface for config objects @done(20-04-05 02:28) @project(Inbox)
  ✔ rework styles for bigger mobile screens @focus @done(20-04-05 02:29) @project(Optims/refactor)
  ✔ show API errors in the UI @done(20-04-01 01:20) @project(Fixes)
  ✔ font weight in page subheaders @done(20-03-31 00:31) @project(Fixes)
  ✔ remove default button styles for card info button (Chrome Android) @done(20-03-31 00:28) @project(Fixes)
  ✔ font weight in autosuggest title @done(20-03-31 00:28) @project(Fixes)
  ✔ order cards by most recent @done(20-03-30 01:15) @project(Fixes)
  ✔ [CARDS] decide what card controls should do when cards are in watched list @done(20-03-30 01:30) @project(Features/stories)
  ✔ [TO-WATCH] implement to-watch feature @done(20-03-29 17:14) @project(Features/stories)
  ✔ search field in HP hides on scroll @done(20-03-29 17:15) @project(Features/stories)
  ✔ auth page flashes when logged-in & reloading @done(20-03-28 18:33) @project(Fixes)
    when the logged-in user is not detected, every private page will redirect to /, so <Auth />; then, when the user is detected, the component will redirect to /home. This is also the reason why (see next task)…
  ✔ Visiting any page via URL when logged-in will flash the auth page and redirect to home @done(20-03-28 18:33) @project(Fixes)
  ✔ implement new data structure @done(20-03-29 17:24) @project(Optims/refactor)
  ✔ redesign DB @done(20-03-26 01:16) @project(Optims/refactor)
    // data structure
    {
    content: {
    '0a777869-b9ec-48ab-ac28-ea05f4042255': {
    (...data)
    }
    },
    users: {
    id_1: {
    watched: {
    '0a777869-b9ec-48ab-ac28-ea05f4042255': true,
    },
    toWatch: {},
    }
    },
    settings: {
    id_1: {apiKey: '',}
    },
    }
  ✔ Close modal after adding item @done(20-03-23 00:04) @project(Fixes)
  ✔ fine-tune card front design @done(20-03-23 00:25) @project(Optims/refactor)
  ✔ [CARDS] implement card flip animations @done(20-03-22 20:13) @project(Features/stories)
    https://www.react-spring.io/
  ✔ [CARDS] create flippable card w/ rich info on the back @done(20-03-22 20:13) @project(Features/stories)
  ✔ [PROFILE] make fields controlled inputs @done(20-03-22 15:37) @project(Features/stories)
  ✔ [WATCHED] sort years in sort by year @done(20-03-22 01:35) @project(Features/stories)
  ✔ write all styles @done(20-03-22 01:24) @project(Features/stories)
  ✔ [PROFILE] control isInputEnabled at a field level @done(20-03-21 22:59) @project(Features/stories)
  ✔ Auth page @done(20-03-21 19:41) @project(Features/stories)
  ✔ [PROFILE] make fields disabled, then editable @done(20-03-21 19:41) @project(Features/stories)
  ✔ settings page @done(20-03-19 00:40) @project(Features/stories)
  ✔ Profile page @done(20-03-19 00:40) @project(Features/stories)
  ✔ restyle cards @done(20-03-11 00:39) @project(Features/stories)
  ✔ link to home in logo @done(20-03-09 00:48) @project(Features/stories)
  ✔ restyle cards -- part 1 @done(20-03-09 00:49) @project(Features/stories)
  ✔ [WATCHED] create hide filters button @done(20-03-08 03:57) @project(Features/stories)
  ✔ create component out of search field @done(20-03-07 19:21) @project(Inbox)
  ✔ Add modal to App, initialState @done(20-03-06 01:31) @project(Inbox)
  ✔ create cancel button for HP search @done(20-03-05 01:11) @project(Inbox)
  ✔ 1st draft @done(20-03-04 01:04) @project(Inbox)
  ✔ implement basic data fetching in HP @done(20-03-04 01:04) @project(Inbox)
  ✔ finish sort by year @done(20-03-03 01:27) @project(Inbox)
  ✔ fix compact view toggle @done(20-03-03 00:34) @project(Fixes)
  ✔ fix watched filter @done(20-03-02 01:23) @project(Fixes)
  ✔ add catchAll page @done(20-03-02 00:23) @project(Inbox)
  ✔ create @done(20-02-28 01:12) @project(Inbox)
  ✔ read @done @project(Inbox)
  ✔ reset search field after a search @done(20-02-28 01:12) @project(Inbox)
  ✔ fix broken local add watched @done(20-02-28 00:32) @project(Fixes)
  ✔ after setting an API key, change the UI to a <p>, not an <input> @done(20-02-27 00:19) @project(Fixes)
  ✔ handle API key request at launch @done(20-02-25 22:36) @project(Inbox)
  ✔ handle API key request in settings @done(20-02-24 01:36) @project(Inbox)
  ✔ Test error boundary @done(20-02-23 18:21) @project(Tests)
  ✔ Add error boundary to app @done(20-02-23 16:16) @project(Inbox)
  ✔ It correctly handles signup @done(20-02-22 18:55) @project(Tests)
  ✔ It correctly handles auth after reload (user persistence) @done(20-02-22 18:57) @project(Tests)
  ✔ remove/disable testPage @done(20-02-22 18:54) @project(Inbox)
  ✔ destroy user data when user is logged out @done(20-02-22 18:46) @project(Inbox)
  ✔ remove navbar from auth page @done(20-02-22 18:44) @project(Inbox)
  ✔ remove redundant Auth comp, convert Start page to Auth page @done(20-02-22 18:04) @project(Inbox)
  ✔ complete transition of Start page to actual page @done(20-02-22 18:04) @project(Inbox)
  ✔ remove redundant modal from auth page @done(20-02-22 18:04) @project(Inbox)
  ✔ set 2-way binding for auth form fields @done(20-02-22 18:03) @project(Inbox)
  ✔ It correctly handles login @done(20-02-22 16:52) @project(Tests)
  ✔ It correctly handles signout @done(20-02-22 16:52) @project(Tests)
